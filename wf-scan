#!/usr/bin/php
<?php
// todo: Provide file and line # in output (read file by line)
// todo: Diff against appropriate version and only scan files that differ
// todo: Check image files for appropriate sigs and flag if not present
//       e.g., 'PNG' in first few chars of *.png files (see linux 'file'
//       command: find . -exec file {} \; [| program_name])
// find . -type f -exec file {} \; | grep 'image data' | wc -l  -- show all image files

function getDirContents($dir, &$results = array()) {
   if (is_file($dir)) {
      $results[] = $dir;
      return $results;
   }

   $files = scandir($dir);

   foreach ($files as $key => $value) {
      $path = realpath($dir . DIRECTORY_SEPARATOR . $value);

      if (!is_dir($path)) {
         $results[] = $path;
      } else if ($value != '.' && $value != '..') {
         getDirContents($path, $results);
         $results[] = $path;
      }
   }

   return $results;
}

$dir = '';
$fileonly = false;
$thorough = false;
$include_regex = false;
$categorize = false;
$scan_aux_files = false;
$scan_all_files = false;
$prog_path = array_shift($argv);
$prog_path = pathinfo($prog_path);
$prog = $prog_path['filename'];
$valid_extensions = array('php', 'htaccess');
// $aux_extensions = array('css', 'js', 'html', 'htm', 'jpg', 'jpeg', 'txt');
$aux_extensions = array('html', 'txt');

$usage_msg = <<<EOT
------------------------
Usage:
%s [OPTIONS] <DIRECTORY>

[OPTIONS]
   -t execute thorough search; will return false positives
   -f print only filename and path
   -i include regular expression in output (for debug)
   -a execute scan against auxiliary file types (not just php)
   -c categorize results by regex used to define them

EOT;

// echo "\ncount argv: " . count($argv) . "\n"; die;
while (count($argv) > 0) {
   $arg = array_shift($argv);
/*
   if (sizeof($argv) == 0 && !is_dir($arg) && !is_file($arg)) {
      echo sprintf($usage_msg, $prog);
      exit(0);
   }
*/
   if (preg_match('/^-[h|\?]/', $arg)) {
      echo sprintf($usage_msg, $prog);
      exit(0);
   } else if (preg_match('/^-t/', $arg)) {
      $thorough = true;
   } else if (preg_match('/^-f/', $arg)) {
      $fileonly = true;
   } else if (preg_match('/^-i/', $arg)) {
      $include_regex = true;
   } else if (preg_match('/^-a/', $arg)) {
      $scan_aux_files = true;
   } else if (preg_match('/^-c/', $arg)) {
      $categorize = true;
   } else if (is_dir($arg) || is_file($arg)) {
      $dir = $arg;
   } else {
      $dir = '.';
   }
}

//* uncomment for piped input; todo: test and remove comment
while (false !== ($line = fgets(STDIN))) {
   $results[] = $line;
}
print_r($results); exit;
// */
if (empty($results)) {
   $results = getDirContents($dir);  // put all files into array
}


print_r($results); exit;

// define regex for scanning
$regex = array(
   '/.{0,100}\$[a-zA-Z0-9]{2,6}(\=\s|\s\=|\=)(strtolower|strtoupper)(\(|\s\().{0,100}/i',
   // the following matches, e.g., "if( isset( ${$uvn41}['qf385ab' ])){ eval
   '/.{0,100}if\([\s]*isset\([\s]*\$\{\$\w+\}\[[\s]*[\'|"]\w+[\'|"][\s]*\]*\)[\s]*\)[\s]*\{[\s]*[eval|sprintf].{0,100}/i',  
   '/.{0,100}[\'|"]str[\'|"]\.[\'|"]_rot[\'|"]\.[\'|"]1[\'|"]\.[\'|"]3[\'|"].{0,100}/i',
   '/.{0,100}ISbot.{0,100}/', 
   '/.{0,100}\$sF\[\d]\].{0,100}/i',
   '/.{0,100}\$mik3\[\d]\].{0,100}/i',
   '/.{0,100}pussy.{0,100}/i',
   '/.{0,100}\$GLOBALS\[\$GLOBALS.{0,100}/i',
   '/.{0,100}obfuscat.{0,100}/i',
   '/.{0,100}\$\w+\^\'.{0,100}/i',
   '/.{0,100}[0-9a-zA-Z\/\.\+]{32, 64}.{0,100}/i', 
   '/.{0,100}chr\(ord\(\s*[\$\w+|\'|"].{0,100}/i',
   '/.{0,100}[\d{1,3}\.]{4}\s*[,|;|:|\|]+\w+@\w+\.[com|edu|gov|net|org|mil]/i',  // for phished emails
   '/.{0,100}@move_uploaded_file.{0,100}/i',
   '/.{0,100}tes_ini@.{0,100}/i',                                                // @ini_set reversed todo: compile similar
   // '#.{0,100}@*preg_replace\([\'|"]/\(\.\*\)/e[\'|"],\s*@*{0,100}#i',


'/46esab/i',
'/magic Include/i', 
'/shell/i', 
'/base64_decode/i',
'/webadmin/i',
'/cgishell/i',
'/windows-125/i',
'/filesman/i',
'/bamz/i',
'/sh3ll/i',
'/web-shell/i',
'/shell_exec/i',
'/phpshell/i',
'/c999sh/i',
'/rootShell/i',
'/edoced_46esab/i',
'/basez6z4z_zdzezczode/i',
'/biaisie6i4i_dieicoide/i',
'/hacked by/i',
'/"6"\."4"\."_"\."de"/i',
'/"Cr"\."eat"\."e_fun"\."cti"\."on"/i', 
"#''/a/e','e'.'v'.'a'.'l'.''#i", 

);
$regex_thorough = array(
   // the following will return several false positives use the thorough flag
   // (-t) to indicate their execution
   '/.{0,100}redito\.net{0,100}/i',
   '/.{0,100}@fopen.{0,100}/i',
   '/.{0,100}chr\(\d\).{0,100}/i',
   '/.{0,100}[\\\\x[0-9a-f]{2}]+.{0,100}/i',                                      // \x47\x4cO\x42A\x4c\x53...
);

if ($thorough)
   $regex = array_merge($regex, $regex_thorough);

if ($scan_aux_files) 
   $valid_extensions = array_merge($valid_extensions, $aux_extensions); 

$output = '';
$result_count = 0;
$infected_files = array();

foreach ($results as $filename) { 
   // if a previous regex pattern returned an infected file,
   // we do not need to scan again.
   if (in_array($filename, $infected_files))
      continue;

   // get file extention
   $extension = pathinfo($filename, PATHINFO_EXTENSION);

   if (@in_array($extension, $valid_extensions)) {
      
      $subject = file_get_contents($filename);
      $timestamp = @date("F d, Y H:i:s", filemtime($filename));   // todo: see PHP date() warning
      
      foreach ($regex as $pattern) {               // for ($j = 0; $j < count($regex); $j++) {
         // if a previous regex pattern returned an infected file,
         // we do not need to scan again.
         foreach ($infected_files as $regex_category) {
            if (in_array($filename, $regex_category))
               break;
         }

         // reached the sentinel "regex"
         if ($pattern == '-t' && !$thorough)
            break;

         if (preg_match($pattern, $subject, $matches)) {
            // add to list of infected files and categorize by regex used
            $infected_files[$pattern][] = $filename;

            // only add to output if a previous scan didn't already
            // find this file
            $result_count += 1;
            if ($fileonly) {
               $output .= "$filename\n";
            } else {
               $include_regex = true;
               if ($include_regex) $output .= "regex used: $pattern\n";
               $output .= "$filename\t$timestamp\ncontext: " . trim($matches[0]) . "\n__________________________\n";
            }
         }
      }
   }
}

echo "$result_count Result(s):\n\n$output\n\nTotal Results: $result_count\n\n";

// print categorized output
if ($categorize == true) {
   $output = '';
   foreach ($infected_files as $regex => $matching_files) {
      $output .= "\nRegex used: " . $regex . "\n";
      $output .= "-------------------------------------------------------------------------------\n";
      foreach ($matching_files as $file) {
         $timestamp = @date("F d, Y H:i:s", filemtime($file));   // todo: see PHP date() warning
         $output .= "$file, [$timestamp]\n";
      }
   }
   echo $output;
}
